import { Icon } from "@iconify/react";
import { Button, Stack } from "@mui/material";
import { ResponsiveBar } from "@nivo/bar";
import moment from "moment";
import { useNavigate } from "react-router-dom";

const headerTextStyle = {
  color: "#121619",
  fontSize: "14px",
  fontWeight: "500",
};

const colors = ["#75DEFF", "#72A2FF", "#8A6DFF"];

const DashboardJobAnalytics = ({ recentCandidates = [], topJobs = [] }) => {
  const navigate = useNavigate();
  const rowsWithIndex = recentCandidates.map((candidate, index) => ({ ...candidate, index }));

  const isBarDataAvailable = topJobs.length > 0;

  const responsiveBarData = isBarDataAvailable
    ? topJobs.map((job, index) => ({
        job_id: job.job_id,
        job_name: job.name,
        Reviewed: job.total_applicants - job.total_applicants_not_reviewed,
        "Not Reviewed": job.total_applicants_not_reviewed,
        "Not ReviewedColor": "rgba(238, 238, 238, 1)",
        ReviewedColor: colors[index % 3],
      }))
    : emptyBarData;

  const handleOnRowClick = (applicationId) => {
    navigate(`/candidates/details?id=${applicationId}`);
  };

  return (
    <div className="dashboard-body">
      <div className="latest-candidates">
        <div className="data-container-title">
          <h2>Latest Candidates</h2>
          <Button
            className="draft-mail-button"
            variant="text"
            onClick={() => navigate("/mails?view=compose")}
          >
            Mail Candidates
            <Icon icon="lucide:chevron-right" width={20} height={20} />
          </Button>
        </div>
        {rowsWithIndex.length > 0 ? (
          <table className="latest-candidates-table">
            <thead>
              <tr>
                <th>Candidate Name</th>
                <th>Job Name</th>
                <th>AI Rating</th>
                <th>Applied Date</th>
              </tr>
            </thead>
            <tbody>
              {rowsWithIndex.map((row) => (
                <tr
                  key={row.application_id}
                  onClick={() => handleOnRowClick(row.application_id)}
                  style={{ cursor: "pointer" }}
                >
                  <td>{row.first_name + " " + row.last_name}</td>
                  <td>{row.job_name}</td>
                  <td>{row.ai_rating}</td>
                  <td>{moment.unix(row.applied_date).format("Do MMM YY")}</td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <div className="latest-candidates-table-empty">
            <img
              src="https://s1.ecnstatic.com/ecn/images/enterprise/urban-no-data-found.png"
              className="urban-no-data-found"
              alt="No data"
            />
            <div className="text">No recent candidates</div>
          </div>
        )}
      </div>
      <div className="job-postings">
        <div className="data-container-title">
          <h2>Your Job Postings</h2>
          <Button className="draft-mail-button" variant="text" onClick={() => navigate("/jobs")}>
            View All Jobs
            <Icon icon="lucide:chevron-right" width={20} height={20} />
          </Button>
        </div>
        <div style={{ width: 441, height: isBarDataAvailable ? 351 : 370 }}>
          <ResponsiveBar
            margin={{ left: 10, right: 10, bottom: 80 }}
            colors={({ data, id }) => String(data[`${id}Color`])}
            enableLabel={false}
            enableGridY={false}
            enableGridX={true}
            colorBy="indexValue"
            padding={0.5}
            borderRadius={3}
            layout="horizontal"
            keys={["Reviewed", "Not Reviewed"]}
            tooltipLabel={(props) => props.id + ": " + props.data.job_name}
            indexBy="job_id"
            axisLeft={null}
            axisRight={null}
            axisTop={null}
            axisBottom={{
              tickSize: 5,
              tickPadding: 5,
              tickRotation: 0,
              legendOffset: 32,
            }}
            isInteractive={isBarDataAvailable}
            data={responsiveBarData}
          />
        </div>
        {isBarDataAvailable && (
          <div className="legend-container">
            {responsiveBarData.map((job) => (
              <div className="legend" key={job.job_id}>
                <div className="color" style={{ backgroundColor: job.ReviewedColor }} />
                <div className="job-name">{job.job_name.split("-")[0]}</div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

const emptyBarData = [
  {
    job_id: "1",
    job_name: "1",
    Reviewed: 200,
    ReviewedColor: "rgba(238, 238, 238, 0)",
    "Not Reviewed": 0,
    "Not ReviewedColor": colors[0],
  },
  {
    job_id: "2",
    job_name: "2",
    Reviewed: 200,
    ReviewedColor: "rgba(238, 238, 238, 0)",
    "Not Reviewed": 0,
    "Not ReviewedColor": colors[0],
  },
  {
    job_id: "3",
    job_name: "3",
    Reviewed: 200,
    ReviewedColor: "rgba(238, 238, 238, 0)",
    "Not Reviewed": 0,
    "Not ReviewedColor": colors[0],
  },
];

export default DashboardJobAnalytics;